'use strict';

const fs = require('fs');
const { createLogger, format, transports } = require('winston');
const { combine, timestamp, label, prettyPrint } = format;

exports.instances = process.env.instances||1;
exports.instance_id = process.env.NODE_APP_INSTANCE||0;

//used to post/poll health status from various services
//also to store various time sensitive cache data
exports.redis = {
    server: "localhost", 
}

exports.amaretti = {
    auth_pubkey: fs.readFileSync('/home/hayashis/git/auth/api/config/auth.pub'),

    //password to encrypt/decrypt confidential resource information
    resource_enc_password: 'f^g#fdkjg2.afgfBkaCS-0ddj',
    resource_cipher_algo: 'aes-256-cbc',

    //jwt token used to access other services (like pulling users gids from auth service)
    jwt: fs.readFileSync(__dirname+'/amaretti.jwt', 'ascii').trim(),

    //groups that all users has access to. 
    //all user will have access to any resources that are shared with this group 
    global_groups: [1],

    //show a bit more debug logging (like mongoose)
    debug: true,
}
exports.wf = exports.amaretti; //deprecated (use amaretti)
exports.sca = exports.amaretti; //deprecated (use amaretti)

//used to use github api (like service.js)
exports.github = {
    access_token: fs.readFileSync(__dirname+"/github.access_token", "ascii").trim(), //https://github.com/settings/applications/487163
}

exports.metrics = {
    resource_prefix: "dev.amaretti.resource-id",
    api: "http://10.0.0.10",
}

exports.mailchimp = {
    api_key: fs.readFileSync(__dirname+"/mailchimp.key", "ascii").trim(),
}

exports.events = {
    //warning.. you don't get error message if your user/pass etc. are incorrect (it just keeps retrying silently..)
    amqp: {url: "amqp://amaretti:gobrain@localhost:5672/brainlife"},

    //deprecated.. should always be "amaretti"
    exchange: "wf", //used as prefix for full exchange name (TODO - it should be "amaretti"!)
}

//api endpoints for various services
exports.api = {
    auth: "https://dev1.soichi.us/api/auth",
}

exports.test = {
    //service test account/instance to use
    service: {
        user_id: "1", 
        instance_id: "570d1ef166a1e2fc1ef5a847",
    }
}

exports.mongodb = "mongodb://localhost/workflow";

exports.express = {
    port: 12403,
}

/*
exports.progress = {
    api: 'https://dev1.soichi.us/api/progress',
}
*/

exports.resources = require('./resources');

exports.logger = {
    winston: {
        //hide headers which may contain jwt
        level: "debug",
        format: combine(
            label({ label: 'amaretti-dev' }),
            timestamp(),
            format.colorize(),
            format.splat(),
            format.printf(info=>{
                return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;
            }),
        ),

        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        exceptionHandlers: [
            new transports.Console(),
        ],

        transports: [
            //display all logs to console
            new transports.Console({
                stderrLevels: ["error"], //error is sent to stdout by default..
                /*
                timestamp: function() {
                    var d = new Date();
                    if(process.env.NODE_APP_INSTANCE) return process.env.NODE_APP_INSTANCE + "> "+ d.toString();
                    return d.toString();
                },
                */
                //level: 'debug',
                //colorize: true,
                //stderrLevels: ["error"], //default includes debug
            }),
        ]
    }
}

/*
exports.multer = {
    dest: "/tmp/upload",
}
*/
